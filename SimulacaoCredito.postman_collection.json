{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Simula√ß√£o de Cr√©dito API",
		"description": "API para simula√ß√£o de cr√©dito com autentica√ß√£o JWT Bearer Token.\n\n## üîê Como Usar\n\n1. **Importe o Environment**: `SimulacaoCredito.postman_environment.json`\n2. **Execute primeiro**: `POST Generate JWT Token` na pasta Authentication\n3. **Use qualquer endpoint**: O token ser√° usado automaticamente!\n\n## üìã Endpoints Dispon√≠veis\n\n- **Authentication**: Gerar e validar tokens JWT\n- **Simula√ß√µes**: Criar, listar e consultar simula√ß√µes\n- **Produtos**: Consultar produtos eleg√≠veis\n- **Telemetria**: Dados de observabilidade\n\n## ‚öôÔ∏è Configura√ß√µes\n\n- **base_url**: http://localhost:5077\n- **username**: admin\n- **password**: 123456\n\nTodos os endpoints (exceto autentica√ß√£o) requerem token JWT v√°lido.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "POST Generate JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Salvar token automaticamente para uso nas outras requests",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('jwt_token', response.token);",
									"    pm.collectionVariables.set('token_expires_at', response.expiresAt);",
									"    pm.collectionVariables.set('current_username', response.username);",
									"    ",
									"    console.log('‚úÖ Token JWT salvo automaticamente!');",
									"    console.log('üë§ Usu√°rio:', response.username);",
									"    console.log('‚è∞ Expira em:', response.expiresAt);",
									"    console.log('üîë Token:', response.token.substring(0, 50) + '...');",
									"} else {",
									"    console.log('‚ùå Erro ao gerar token:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token"
							]
						},
						"description": "Gera um token JWT para autentica√ß√£o.\n\n**Credenciais dispon√≠veis:**\n- admin / 123456\n- user / password\n- test / test123\n\n**O token √© salvo automaticamente** e usado nas outras requests."
					},
					"response": []
				},
				{
					"name": "GET Validate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Token v√°lido para usu√°rio:', response.username);",
									"    console.log('‚è∞ Validado em:', response.validatedAt);",
									"} else if (pm.response.code === 401) {",
									"    console.log('‚ùå Token inv√°lido ou expirado. Execute \"Generate JWT Token\" novamente.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate"
							]
						},
						"description": "Valida se o token JWT atual ainda √© v√°lido.\n\n**Requer:** Token JWT v√°lido no header Authorization."
					},
					"response": []
				}
			],
			"description": "Endpoints para autentica√ß√£o JWT.\n\n**Execute primeiro** o \"Generate JWT Token\" para obter acesso aos outros endpoints."
		},
		{
			"name": "üìä Simula√ß√µes",
			"item": [
				{
					"name": "POST Criar Simula√ß√£o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('last_simulacao_id', response.idSimulacao);",
									"    console.log('‚úÖ Simula√ß√£o criada com sucesso!');",
									"    console.log('üÜî ID:', response.idSimulacao);",
									"    console.log('üè™ Produto:', response.descricaoProduto);",
									"    console.log('üí∞ Valor:', 'R$', response.valorDesejado.toLocaleString('pt-BR'));",
									"} else {",
									"    console.log('‚ùå Erro ao criar simula√ß√£o:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"valorDesejado\": 5000,\n  \"prazo\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/simulacoes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"simulacoes"
							]
						},
						"description": "Cria uma nova simula√ß√£o de cr√©dito.\n\n**Par√¢metros:**\n- valorDesejado: Valor do empr√©stimo (R$ 1.000 - R$ 2.000.000)\n- prazo: Prazo em meses (1 - 420)\n\n**Retorna:** Simula√ß√£o com c√°lculos SAC e PRICE"
					},
					"response": []
				},
				{
					"name": "GET Listar Simula√ß√µes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Simula√ß√µes listadas com sucesso!');",
									"    console.log('üìÑ P√°gina:', response.pagina, 'de', Math.ceil(response.qtdRegistros / response.qtdRegistrosPagina));",
									"    console.log('üìä Total de registros:', response.qtdRegistros);",
									"    console.log('üìã Registros nesta p√°gina:', response.registros.length);",
									"} else {",
									"    console.log('‚ùå Erro ao listar simula√ß√µes:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/simulacoes?pagina=1&tamanhoPagina=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"simulacoes"
							],
							"query": [
								{
									"key": "pagina",
									"value": "1",
									"description": "N√∫mero da p√°gina (padr√£o: 1)"
								},
								{
									"key": "tamanhoPagina",
									"value": "10",
									"description": "Registros por p√°gina (padr√£o: 10, m√°ximo: 100)"
								}
							]
						},
						"description": "Lista todas as simula√ß√µes com pagina√ß√£o.\n\n**Query Parameters:**\n- pagina: N√∫mero da p√°gina (padr√£o: 1)\n- tamanhoPagina: Registros por p√°gina (padr√£o: 10, m√°ximo: 100)"
					},
					"response": []
				},
				{
					"name": "GET Obter Simula√ß√£o por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Simula√ß√£o encontrada!');",
									"    console.log('üÜî ID:', response.idSimulacao);",
									"    console.log('üè™ Produto:', response.descricaoProduto);",
									"    console.log('üí∞ Valor:', 'R$', response.valorDesejado.toLocaleString('pt-BR'));",
									"    console.log('üìÖ Prazo:', response.prazo, 'meses');",
									"} else if (pm.response.code === 404) {",
									"    console.log('‚ùå Simula√ß√£o n√£o encontrada com este ID.');",
									"} else {",
									"    console.log('‚ùå Erro ao obter simula√ß√£o:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/simulacoes/{{last_simulacao_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"simulacoes",
								"{{last_simulacao_id}}"
							]
						},
						"description": "Obt√©m uma simula√ß√£o espec√≠fica pelo ID.\n\n**Path Parameter:**\n- id: ID da simula√ß√£o\n\n**Nota:** Usa automaticamente o ID da √∫ltima simula√ß√£o criada."
					},
					"response": []
				},
				{
					"name": "GET Volume por Produto/Dia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Volume por produto obtido com sucesso!');",
									"    console.log('üìÖ Data de refer√™ncia:', response.dataReferencia);",
									"    console.log('üìä Total de produtos:', response.produtos.length);",
									"} else {",
									"    console.log('‚ùå Erro ao obter volume por produto:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/simulacoes/por-produto?dataReferencia=2025-08-27T10:00:00.000Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"simulacoes",
								"por-produto"
							],
							"query": [
								{
									"key": "dataReferencia",
									"value": "2025-08-27T10:00:00.000Z",
									"description": "Data de refer√™ncia (formato ISO 8601)"
								}
							]
						},
						"description": "Obt√©m o volume de simula√ß√µes por produto em uma data espec√≠fica.\n\n**Query Parameter:**\n- dataReferencia: Data no formato ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ)"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar simula√ß√µes de cr√©dito.\n\n**Funcionalidades:**\n- Criar novas simula√ß√µes\n- Listar simula√ß√µes com pagina√ß√£o\n- Consultar simula√ß√£o espec√≠fica\n- Obter relat√≥rios de volume"
		},
		{
			"name": "üè™ Produtos",
			"item": [
				{
					"name": "GET Listar Todos os Produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Produtos listados com sucesso!');",
									"    console.log('üìä Total de produtos:', response.length);",
									"    response.forEach((produto, index) => {",
									"        console.log(`${index + 1}. ${produto.nomeProduto} - Taxa: ${produto.taxaJuros}%`);",
									"    });",
									"} else {",
									"    console.log('‚ùå Erro ao listar produtos:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/produtos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"produtos"
							]
						},
						"description": "Lista todos os produtos dispon√≠veis no sistema.\n\n**Retorna:** Array com todos os produtos e suas caracter√≠sticas."
					},
					"response": []
				},
				{
					"name": "GET Produtos Eleg√≠veis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Produtos eleg√≠veis encontrados!');",
									"    console.log('üìä Total de produtos eleg√≠veis:', response.length);",
									"    response.forEach((produto, index) => {",
									"        console.log(`${index + 1}. ${produto.nomeProduto} - Taxa: ${produto.taxaJuros}%`);",
									"        console.log(`   Valor: R$ ${produto.valorMinimo.toLocaleString('pt-BR')} - R$ ${produto.valorMaximo.toLocaleString('pt-BR')}`);",
									"        console.log(`   Prazo: ${produto.minimoMeses} - ${produto.maximoMeses} meses`);",
									"    });",
									"} else if (pm.response.code === 400) {",
									"    console.log('‚ùå Par√¢metros inv√°lidos. Verifique valor e prazo.');",
									"} else {",
									"    console.log('‚ùå Erro ao consultar produtos eleg√≠veis:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/produtos/elegiveis?valor=5000&prazo=12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"produtos",
								"elegiveis"
							],
							"query": [
								{
									"key": "valor",
									"value": "5000",
									"description": "Valor desejado do empr√©stimo"
								},
								{
									"key": "prazo",
									"value": "12",
									"description": "Prazo desejado em meses"
								}
							]
						},
						"description": "Consulta produtos eleg√≠veis para um valor e prazo espec√≠ficos.\n\n**Query Parameters:**\n- valor: Valor do empr√©stimo desejado\n- prazo: Prazo em meses\n\n**Retorna:** Produtos que atendem aos crit√©rios informados."
					},
					"response": []
				}
			],
			"description": "Endpoints para consultar produtos de cr√©dito.\n\n**Funcionalidades:**\n- Listar todos os produtos dispon√≠veis\n- Consultar produtos eleg√≠veis por valor/prazo"
		},
		{
			"name": "üìà Telemetria",
			"item": [
				{
					"name": "GET Dados de Telemetria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Dados de telemetria obtidos com sucesso!');",
									"    console.log('üìä Total de registros:', response.length);",
									"    if (response.length > 0) {",
									"        console.log('üìÖ Per√≠odo:', response[0].dataHora, 'at√©', response[response.length - 1].dataHora);",
									"    }",
									"} else {",
									"    console.log('‚ùå Erro ao obter telemetria:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/telemetria",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"telemetria"
							]
						},
						"description": "Obt√©m dados de telemetria e observabilidade da aplica√ß√£o.\n\n**Retorna:** M√©tricas de uso, performance e logs da aplica√ß√£o."
					},
					"response": []
				}
			],
			"description": "Endpoints para monitoramento e observabilidade.\n\n**Funcionalidades:**\n- Dados de telemetria da aplica√ß√£o\n- M√©tricas de performance\n- Logs de auditoria"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verificar se o token existe e n√£o expirou",
					"const token = pm.collectionVariables.get('jwt_token');",
					"const expiresAt = pm.collectionVariables.get('token_expires_at');",
					"",
					"if (!token) {",
					"    console.log('‚ö†Ô∏è Token JWT n√£o encontrado. Execute \"Generate JWT Token\" primeiro.');",
					"} else if (expiresAt && new Date() > new Date(expiresAt)) {",
					"    console.log('‚ö†Ô∏è Token JWT expirado. Execute \"Generate JWT Token\" novamente.');",
					"    pm.collectionVariables.unset('jwt_token');",
					"} else {",
					"    console.log('‚úÖ Token JWT v√°lido encontrado.');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_expires_at",
			"value": "",
			"type": "string"
		},
		{
			"key": "current_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "last_simulacao_id",
			"value": "",
			"type": "string"
		}
	]
}
