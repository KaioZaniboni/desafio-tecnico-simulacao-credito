{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Simula√ß√£o de Cr√©dito API",
		"description": "API para simula√ß√£o de cr√©dito com autentica√ß√£o JWT Bearer Token.\n\n## üîê Como Usar\n\n1. **Importe o Environment**: `SimulacaoCredito.postman_environment.json`\n2. **Execute primeiro**: `POST Generate JWT Token` na pasta Authentication\n3. **Use qualquer endpoint**: O token ser√° usado automaticamente!\n\n## üìã Endpoints Dispon√≠veis\n\n- **Authentication**: Gerar e validar tokens JWT\n- **Simula√ß√µes**: Criar, listar e consultar simula√ß√µes\n- **Produtos**: Consultar produtos eleg√≠veis\n- **Telemetria**: Dados de observabilidade\n\n## ‚öôÔ∏è Configura√ß√µes\n\n- **base_url**: http://localhost:5077\n- **username**: admin\n- **password**: 123456\n\nTodos os endpoints (exceto autentica√ß√£o) requerem token JWT v√°lido.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "POST Generate JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Salvar token automaticamente para uso nas outras requests",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('jwt_token', response.token);",
									"    pm.collectionVariables.set('token_expires_at', response.expiresAt);",
									"    pm.collectionVariables.set('current_username', response.username);",
									"    ",
									"    console.log('‚úÖ Token JWT salvo automaticamente!');",
									"    console.log('üë§ Usu√°rio:', response.username);",
									"    console.log('‚è∞ Expira em:', response.expiresAt);",
									"    console.log('üîë Token:', response.token.substring(0, 50) + '...');",
									"} else {",
									"    console.log('‚ùå Erro ao gerar token:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token"
							]
						},
						"description": "Gera um token JWT para autentica√ß√£o.\n\n**Credenciais dispon√≠veis:**\n- admin / 123456\n- user / password\n- test / test123\n\n**O token √© salvo automaticamente** e usado nas outras requests."
					},
					"response": []
				},
				{
					"name": "GET Validate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Token v√°lido para usu√°rio:', response.username);",
									"    console.log('‚è∞ Validado em:', response.validatedAt);",
									"} else if (pm.response.code === 401) {",
									"    console.log('‚ùå Token inv√°lido ou expirado. Execute \"Generate JWT Token\" novamente.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate"
							]
						},
						"description": "Valida se o token JWT atual ainda √© v√°lido.\n\n**Requer:** Token JWT v√°lido no header Authorization."
					},
					"response": []
				}
			],
			"description": "Endpoints para autentica√ß√£o JWT.\n\n**Execute primeiro** o \"Generate JWT Token\" para obter acesso aos outros endpoints."
		},
		{
			"name": "üìä Simula√ß√µes",
			"item": [
				{
					"name": "POST Criar Simula√ß√£o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('last_simulacao_id', response.idSimulacao);",
									"    console.log('‚úÖ Simula√ß√£o criada com sucesso!');",
									"    console.log('üÜî ID:', response.idSimulacao);",
									"    console.log('üè™ Produto:', response.descricaoProduto);",
									"    console.log('üí∞ Valor:', 'R$', response.valorDesejado.toLocaleString('pt-BR'));",
									"} else {",
									"    console.log('‚ùå Erro ao criar simula√ß√£o:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"valorDesejado\": 50000,\n  \"prazo\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/simulacoes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"simulacoes"
							]
						},
						"description": "Cria uma nova simula√ß√£o de cr√©dito.\n\n**Par√¢metros:**\n- valorDesejado: Valor do empr√©stimo (R$ 1.000 - R$ 2.000.000)\n- prazo: Prazo em meses (1 - 420)\n\n**Retorna:** Simula√ß√£o com c√°lculos SAC e PRICE"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verificar se o token existe e n√£o expirou",
					"const token = pm.collectionVariables.get('jwt_token');",
					"const expiresAt = pm.collectionVariables.get('token_expires_at');",
					"",
					"if (!token) {",
					"    console.log('‚ö†Ô∏è Token JWT n√£o encontrado. Execute \"Generate JWT Token\" primeiro.');",
					"} else if (expiresAt && new Date() > new Date(expiresAt)) {",
					"    console.log('‚ö†Ô∏è Token JWT expirado. Execute \"Generate JWT Token\" novamente.');",
					"    pm.collectionVariables.unset('jwt_token');",
					"} else {",
					"    console.log('‚úÖ Token JWT v√°lido encontrado.');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_expires_at",
			"value": "",
			"type": "string"
		},
		{
			"key": "current_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "last_simulacao_id",
			"value": "",
			"type": "string"
		}
	]
}
